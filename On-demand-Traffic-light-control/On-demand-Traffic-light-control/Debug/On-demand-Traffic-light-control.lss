
On-demand-Traffic-light-control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ae6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000ae6  00000b7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800062  00800062  00000b7c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b7c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fe5  00000000  00000000  00000d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b4  00000000  00000000  00001ce5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b7c  00000000  00000000  00002599  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f8  00000000  00000000  00003118  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000580  00000000  00000000  00003310  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000079c  00000000  00000000  00003890  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0000402c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ee       	ldi	r30, 0xE6	; 230
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 36       	cpi	r26, 0x65	; 101
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 3d 01 	call	0x27a	; 0x27a <main>
  8a:	0c 94 71 05 	jmp	0xae2	; 0xae2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <app_init>:

void app_init(void)
{
	
	//initialize car LEDs
	LED_init(carLEDsPort, carGreenLEDpin);
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	81 e4       	ldi	r24, 0x41	; 65
  96:	0e 94 1a 01 	call	0x234	; 0x234 <LED_init>
	LED_init(carLEDsPort, carYellowLEDpin);
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	81 e4       	ldi	r24, 0x41	; 65
  9e:	0e 94 1a 01 	call	0x234	; 0x234 <LED_init>
	LED_init(carLEDsPort, carRedLEDpin);
  a2:	62 e0       	ldi	r22, 0x02	; 2
  a4:	81 e4       	ldi	r24, 0x41	; 65
  a6:	0e 94 1a 01 	call	0x234	; 0x234 <LED_init>
	
	//initialize pedestrian LEDs
	LED_init(pedestrianLEDsPort, pedestrianGreenLEDpin);
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	82 e4       	ldi	r24, 0x42	; 66
  ae:	0e 94 1a 01 	call	0x234	; 0x234 <LED_init>
	LED_init(pedestrianLEDsPort, pedestrianYellowLEDpin);
  b2:	61 e0       	ldi	r22, 0x01	; 1
  b4:	82 e4       	ldi	r24, 0x42	; 66
  b6:	0e 94 1a 01 	call	0x234	; 0x234 <LED_init>
	LED_init(pedestrianLEDsPort, pedestrianRedLEDpin);
  ba:	62 e0       	ldi	r22, 0x02	; 2
  bc:	82 e4       	ldi	r24, 0x42	; 66
  be:	0e 94 1a 01 	call	0x234	; 0x234 <LED_init>

	//initialize pedestrian button
	button_init(pedestrianButtonPort, pedestrianButtonPin);
  c2:	62 e0       	ldi	r22, 0x02	; 2
  c4:	84 e4       	ldi	r24, 0x44	; 68
  c6:	0e 94 12 01 	call	0x224	; 0x224 <button_init>

	//enable global interrupts
	sei();
  ca:	8f b7       	in	r24, 0x3f	; 63
  cc:	80 68       	ori	r24, 0x80	; 128
  ce:	8f bf       	out	0x3f, r24	; 63
	
	//choose sense: rising edge
	INT0_risingEdge();
  d0:	85 b7       	in	r24, 0x35	; 53
  d2:	83 60       	ori	r24, 0x03	; 3
  d4:	85 bf       	out	0x35, r24	; 53
	
	//enable external interrupts
	INT0_enable();
  d6:	8b b7       	in	r24, 0x3b	; 59
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	8b bf       	out	0x3b, r24	; 59
	
	timer0_init();
  dc:	0e 94 a9 02 	call	0x552	; 0x552 <timer0_init>
  e0:	08 95       	ret

000000e2 <app_start>:

void app_start()
{
	while(1)
	{
		mode = normal;
  e2:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
	LED_on(carLEDsPort, carGreenLEDpin);                             //GREEN for cars
  e6:	60 e0       	ldi	r22, 0x00	; 0
  e8:	81 e4       	ldi	r24, 0x41	; 65
  ea:	0e 94 23 01 	call	0x246	; 0x246 <LED_on>
	LED_on(pedestrianLEDsPort, pedestrianRedLEDpin);                //RED for pedestrian
  ee:	62 e0       	ldi	r22, 0x02	; 2
  f0:	82 e4       	ldi	r24, 0x42	; 66
  f2:	0e 94 23 01 	call	0x246	; 0x246 <LED_on>
	timer0_delay(5000);                                            //if interrupted here. will stop delay and go to blink y led
  f6:	88 e8       	ldi	r24, 0x88	; 136
  f8:	93 e1       	ldi	r25, 0x13	; 19
  fa:	0e 94 ab 02 	call	0x556	; 0x556 <timer0_delay>
																	//num3 in pedestrian mode in rubric
	LED_off(carLEDsPort, carGreenLEDpin);
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	81 e4       	ldi	r24, 0x41	; 65
 102:	0e 94 2c 01 	call	0x258	; 0x258 <LED_off>
	LED_off(pedestrianLEDsPort, pedestrianRedLEDpin);
 106:	62 e0       	ldi	r22, 0x02	; 2
 108:	82 e4       	ldi	r24, 0x42	; 66
 10a:	0e 94 2c 01 	call	0x258	; 0x258 <LED_off>
		
		for(int i=0;i<10;i++)
 10e:	c0 e0       	ldi	r28, 0x00	; 0
 110:	d0 e0       	ldi	r29, 0x00	; 0
 112:	1a c0       	rjmp	.+52     	; 0x148 <app_start+0x66>
		{                                     //interrupt stops the previus delay
		if(mode == pedestrian)               //interrupt start blinking for 5 sec==> num3 in pedestrian mode in rubric
 114:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 118:	81 30       	cpi	r24, 0x01	; 1
 11a:	49 f4       	brne	.+18     	; 0x12e <app_start+0x4c>
		{
			i = 0;
			LED_on(pedestrianLEDsPort, pedestrianRedLEDpin);                //RED for pedestrian
 11c:	62 e0       	ldi	r22, 0x02	; 2
 11e:	82 e4       	ldi	r24, 0x42	; 66
 120:	0e 94 23 01 	call	0x246	; 0x246 <LED_on>
			mode = pedestrian_press;                //to prevent double press
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
		
		for(int i=0;i<10;i++)
		{                                     //interrupt stops the previus delay
		if(mode == pedestrian)               //interrupt start blinking for 5 sec==> num3 in pedestrian mode in rubric
		{
			i = 0;
 12a:	c0 e0       	ldi	r28, 0x00	; 0
 12c:	d0 e0       	ldi	r29, 0x00	; 0
			LED_on(pedestrianLEDsPort, pedestrianRedLEDpin);                //RED for pedestrian
			mode = pedestrian_press;                //to prevent double press
		}
		LED_toggle(carLEDsPort,carYellowLEDpin);
 12e:	61 e0       	ldi	r22, 0x01	; 1
 130:	81 e4       	ldi	r24, 0x41	; 65
 132:	0e 94 35 01 	call	0x26a	; 0x26a <LED_toggle>
		LED_toggle(pedestrianLEDsPort,pedestrianYellowLEDpin);
 136:	61 e0       	ldi	r22, 0x01	; 1
 138:	82 e4       	ldi	r24, 0x42	; 66
 13a:	0e 94 35 01 	call	0x26a	; 0x26a <LED_toggle>
		timer0_delay(500);	
 13e:	84 ef       	ldi	r24, 0xF4	; 244
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	0e 94 ab 02 	call	0x556	; 0x556 <timer0_delay>
	timer0_delay(5000);                                            //if interrupted here. will stop delay and go to blink y led
																	//num3 in pedestrian mode in rubric
	LED_off(carLEDsPort, carGreenLEDpin);
	LED_off(pedestrianLEDsPort, pedestrianRedLEDpin);
		
		for(int i=0;i<10;i++)
 146:	21 96       	adiw	r28, 0x01	; 1
 148:	ca 30       	cpi	r28, 0x0A	; 10
 14a:	d1 05       	cpc	r29, r1
 14c:	1c f3       	brlt	.-58     	; 0x114 <app_start+0x32>
		LED_toggle(pedestrianLEDsPort,pedestrianYellowLEDpin);
		timer0_delay(500);	
				
		}
		
		LED_off(carLEDsPort, carYellowLEDpin);
 14e:	61 e0       	ldi	r22, 0x01	; 1
 150:	81 e4       	ldi	r24, 0x41	; 65
 152:	0e 94 2c 01 	call	0x258	; 0x258 <LED_off>
		LED_off(pedestrianLEDsPort, pedestrianYellowLEDpin);	
 156:	61 e0       	ldi	r22, 0x01	; 1
 158:	82 e4       	ldi	r24, 0x42	; 66
 15a:	0e 94 2c 01 	call	0x258	; 0x258 <LED_off>
		
	mode = normal;
 15e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
	
	LED_off(pedestrianLEDsPort, pedestrianRedLEDpin);
 162:	62 e0       	ldi	r22, 0x02	; 2
 164:	82 e4       	ldi	r24, 0x42	; 66
 166:	0e 94 2c 01 	call	0x258	; 0x258 <LED_off>
	LED_on(carLEDsPort, carRedLEDpin);                              //RED for Cars
 16a:	62 e0       	ldi	r22, 0x02	; 2
 16c:	81 e4       	ldi	r24, 0x41	; 65
 16e:	0e 94 23 01 	call	0x246	; 0x246 <LED_on>
	LED_on(pedestrianLEDsPort, pedestrianGreenLEDpin);              //GREEN for pedestrian
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	82 e4       	ldi	r24, 0x42	; 66
 176:	0e 94 23 01 	call	0x246	; 0x246 <LED_on>
	
	timer0_delay(5000); //interrupt should cancel this delay !?
 17a:	88 e8       	ldi	r24, 0x88	; 136
 17c:	93 e1       	ldi	r25, 0x13	; 19
 17e:	0e 94 ab 02 	call	0x556	; 0x556 <timer0_delay>
	
	if(mode == pedestrian)               //interrupt extends the delay==> num2 in pedestrian mode in rubric
 182:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	31 f4       	brne	.+12     	; 0x196 <app_start+0xb4>
	{
		 timer0_delay(5000);         // this will not listen to another button press
 18a:	88 e8       	ldi	r24, 0x88	; 136
 18c:	93 e1       	ldi	r25, 0x13	; 19
 18e:	0e 94 ab 02 	call	0x556	; 0x556 <timer0_delay>
		mode = normal;
 192:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
	}
	LED_off(carLEDsPort, carRedLEDpin);
 196:	62 e0       	ldi	r22, 0x02	; 2
 198:	81 e4       	ldi	r24, 0x41	; 65
 19a:	0e 94 2c 01 	call	0x258	; 0x258 <LED_off>
	LED_off(pedestrianLEDsPort, pedestrianGreenLEDpin);
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	82 e4       	ldi	r24, 0x42	; 66
 1a2:	0e 94 2c 01 	call	0x258	; 0x258 <LED_off>
	
		for(int i=0;i<10;i++)
 1a6:	c0 e0       	ldi	r28, 0x00	; 0
 1a8:	d0 e0       	ldi	r29, 0x00	; 0
 1aa:	0d c0       	rjmp	.+26     	; 0x1c6 <app_start+0xe4>
		{
			LED_toggle(carLEDsPort,carYellowLEDpin);
 1ac:	61 e0       	ldi	r22, 0x01	; 1
 1ae:	81 e4       	ldi	r24, 0x41	; 65
 1b0:	0e 94 35 01 	call	0x26a	; 0x26a <LED_toggle>
			LED_toggle(pedestrianLEDsPort,pedestrianYellowLEDpin);
 1b4:	61 e0       	ldi	r22, 0x01	; 1
 1b6:	82 e4       	ldi	r24, 0x42	; 66
 1b8:	0e 94 35 01 	call	0x26a	; 0x26a <LED_toggle>
			timer0_delay(500);
 1bc:	84 ef       	ldi	r24, 0xF4	; 244
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	0e 94 ab 02 	call	0x556	; 0x556 <timer0_delay>
		mode = normal;
	}
	LED_off(carLEDsPort, carRedLEDpin);
	LED_off(pedestrianLEDsPort, pedestrianGreenLEDpin);
	
		for(int i=0;i<10;i++)
 1c4:	21 96       	adiw	r28, 0x01	; 1
 1c6:	ca 30       	cpi	r28, 0x0A	; 10
 1c8:	d1 05       	cpc	r29, r1
 1ca:	84 f3       	brlt	.-32     	; 0x1ac <app_start+0xca>
 1cc:	8a cf       	rjmp	.-236    	; 0xe2 <app_start>

000001ce <__vector_1>:
	
}


ISR(INT_EXT_0)
{
 1ce:	1f 92       	push	r1
 1d0:	0f 92       	push	r0
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	0f 92       	push	r0
 1d6:	11 24       	eor	r1, r1
 1d8:	2f 93       	push	r18
 1da:	3f 93       	push	r19
 1dc:	4f 93       	push	r20
 1de:	5f 93       	push	r21
 1e0:	6f 93       	push	r22
 1e2:	7f 93       	push	r23
 1e4:	8f 93       	push	r24
 1e6:	9f 93       	push	r25
 1e8:	af 93       	push	r26
 1ea:	bf 93       	push	r27
 1ec:	ef 93       	push	r30
 1ee:	ff 93       	push	r31
	 
	if(mode == normal)
 1f0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 1f4:	81 11       	cpse	r24, r1
 1f6:	05 c0       	rjmp	.+10     	; 0x202 <__vector_1+0x34>
	{	
	 delay_stop();            ///to prevent delay stop in double press
 1f8:	0e 94 3f 03 	call	0x67e	; 0x67e <delay_stop>
	
	 mode = pedestrian;
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
	}
 202:	ff 91       	pop	r31
 204:	ef 91       	pop	r30
 206:	bf 91       	pop	r27
 208:	af 91       	pop	r26
 20a:	9f 91       	pop	r25
 20c:	8f 91       	pop	r24
 20e:	7f 91       	pop	r23
 210:	6f 91       	pop	r22
 212:	5f 91       	pop	r21
 214:	4f 91       	pop	r20
 216:	3f 91       	pop	r19
 218:	2f 91       	pop	r18
 21a:	0f 90       	pop	r0
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	0f 90       	pop	r0
 220:	1f 90       	pop	r1
 222:	18 95       	reti

00000224 <button_init>:
#include "button.h"

//initialize button pin
EN_BUTTON_ERROR_t button_init(uint8_t buttonPort, uint8_t buttonPin)
{
	if(DIO_init(buttonPort, buttonPin , IN) != OK) return BUTTON_INIT_ERROR;
 224:	40 e0       	ldi	r20, 0x00	; 0
 226:	0e 94 44 01 	call	0x288	; 0x288 <DIO_init>
 22a:	88 23       	and	r24, r24
 22c:	11 f0       	breq	.+4      	; 0x232 <button_init+0xe>
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	08 95       	ret
 }
 232:	08 95       	ret

00000234 <LED_init>:
#include "led.h"
//#include "../../utilities/types.h"

EN_LED_ERROR_t LED_init (uint8_t portNum, uint8_t pinNum)
{
	if(DIO_init(portNum, pinNum, OUT) != OK) return LED_INIT_ERROR;
 234:	41 e0       	ldi	r20, 0x01	; 1
 236:	0e 94 44 01 	call	0x288	; 0x288 <DIO_init>
 23a:	88 23       	and	r24, r24
 23c:	11 f0       	breq	.+4      	; 0x242 <LED_init+0xe>
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	08 95       	ret
	return OK;
 242:	80 e0       	ldi	r24, 0x00	; 0
}
 244:	08 95       	ret

00000246 <LED_on>:


EN_LED_ERROR_t LED_on (uint8_t portNum, uint8_t pinNum)
{
	
	if(DIO_write(portNum, pinNum, HIGH) != OK) return LED_ON_ERROR;
 246:	41 e0       	ldi	r20, 0x01	; 1
 248:	0e 94 d6 01 	call	0x3ac	; 0x3ac <DIO_write>
 24c:	88 23       	and	r24, r24
 24e:	11 f0       	breq	.+4      	; 0x254 <LED_on+0xe>
 250:	82 e0       	ldi	r24, 0x02	; 2
 252:	08 95       	ret
	return OK;
 254:	80 e0       	ldi	r24, 0x00	; 0

}
 256:	08 95       	ret

00000258 <LED_off>:

EN_LED_ERROR_t LED_off (uint8_t portNum, uint8_t pinNum)
{
	if(DIO_write(portNum, pinNum, LOW) != OK) return LED_OFF_ERROR;
 258:	40 e0       	ldi	r20, 0x00	; 0
 25a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <DIO_write>
 25e:	88 23       	and	r24, r24
 260:	11 f0       	breq	.+4      	; 0x266 <LED_off+0xe>
 262:	83 e0       	ldi	r24, 0x03	; 3
 264:	08 95       	ret
	return OK;
 266:	80 e0       	ldi	r24, 0x00	; 0

}
 268:	08 95       	ret

0000026a <LED_toggle>:

EN_LED_ERROR_t LED_toggle (uint8_t portNum, uint8_t pinNum)
{
	if(DIO_toggle(portNum, pinNum) != OK) return LED_TOGGLE_ERROR;
 26a:	0e 94 68 02 	call	0x4d0	; 0x4d0 <DIO_toggle>
 26e:	88 23       	and	r24, r24
 270:	11 f0       	breq	.+4      	; 0x276 <LED_toggle+0xc>
 272:	84 e0       	ldi	r24, 0x04	; 4
 274:	08 95       	ret
	return OK;
 276:	80 e0       	ldi	r24, 0x00	; 0
 
 278:	08 95       	ret

0000027a <main>:
#include "application/application.h"


int main(void)
{
	app_init();
 27a:	0e 94 49 00 	call	0x92	; 0x92 <app_init>
	
	app_start();
 27e:	0e 94 71 00 	call	0xe2	; 0xe2 <app_start>
}
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	08 95       	ret

00000288 <DIO_init>:

#include "dio.h"

EN_DIO_ERROR_t DIO_init(uint8_t portNum, uint8_t pinNum, uint8_t direction)
{
	if(pinNum>7 || pinNum<0) return WRONG_PIN;  // handle error wrong pin 
 288:	68 30       	cpi	r22, 0x08	; 8
 28a:	08 f0       	brcs	.+2      	; 0x28e <DIO_init+0x6>
 28c:	83 c0       	rjmp	.+262    	; 0x394 <DIO_init+0x10c>
	switch (portNum)
 28e:	82 34       	cpi	r24, 0x42	; 66
 290:	49 f1       	breq	.+82     	; 0x2e4 <DIO_init+0x5c>
 292:	18 f4       	brcc	.+6      	; 0x29a <DIO_init+0x12>
 294:	81 34       	cpi	r24, 0x41	; 65
 296:	41 f0       	breq	.+16     	; 0x2a8 <DIO_init+0x20>
 298:	7f c0       	rjmp	.+254    	; 0x398 <DIO_init+0x110>
 29a:	83 34       	cpi	r24, 0x43	; 67
 29c:	09 f4       	brne	.+2      	; 0x2a0 <DIO_init+0x18>
 29e:	40 c0       	rjmp	.+128    	; 0x320 <DIO_init+0x98>
 2a0:	84 34       	cpi	r24, 0x44	; 68
 2a2:	09 f4       	brne	.+2      	; 0x2a6 <DIO_init+0x1e>
 2a4:	5a c0       	rjmp	.+180    	; 0x35a <DIO_init+0xd2>
 2a6:	78 c0       	rjmp	.+240    	; 0x398 <DIO_init+0x110>
	{
		case 'A':
			if(direction==IN) DDRA &=~(1<<pinNum) ;  //input
 2a8:	41 11       	cpse	r20, r1
 2aa:	0d c0       	rjmp	.+26     	; 0x2c6 <DIO_init+0x3e>
 2ac:	2a b3       	in	r18, 0x1a	; 26
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_init+0x30>
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	6a 95       	dec	r22
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_init+0x2c>
 2bc:	80 95       	com	r24
 2be:	82 23       	and	r24, r18
 2c0:	8a bb       	out	0x1a, r24	; 26
			break;
	
		default: return WRONG_PORT ;           //// handle error wrong port
	}
	
	return OK;
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	08 95       	ret
	if(pinNum>7 || pinNum<0) return WRONG_PIN;  // handle error wrong pin 
	switch (portNum)
	{
		case 'A':
			if(direction==IN) DDRA &=~(1<<pinNum) ;  //input
			else if(direction==OUT) DDRA |=(1<<pinNum) ; //output
 2c6:	41 30       	cpi	r20, 0x01	; 1
 2c8:	09 f0       	breq	.+2      	; 0x2cc <DIO_init+0x44>
 2ca:	68 c0       	rjmp	.+208    	; 0x39c <DIO_init+0x114>
 2cc:	2a b3       	in	r18, 0x1a	; 26
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_init+0x50>
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	6a 95       	dec	r22
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_init+0x4c>
 2dc:	82 2b       	or	r24, r18
 2de:	8a bb       	out	0x1a, r24	; 26
			break;
	
		default: return WRONG_PORT ;           //// handle error wrong port
	}
	
	return OK;
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	08 95       	ret
			else if(direction==OUT) DDRA |=(1<<pinNum) ; //output
			else return WRONG_DIRECTION;                //// handle error wrong direction
			break;
		
		case 'B':
			if(direction==IN) DDRB &=~(1<<pinNum) ;  //input
 2e4:	41 11       	cpse	r20, r1
 2e6:	0d c0       	rjmp	.+26     	; 0x302 <DIO_init+0x7a>
 2e8:	27 b3       	in	r18, 0x17	; 23
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <DIO_init+0x6c>
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	6a 95       	dec	r22
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <DIO_init+0x68>
 2f8:	80 95       	com	r24
 2fa:	82 23       	and	r24, r18
 2fc:	87 bb       	out	0x17, r24	; 23
			break;
	
		default: return WRONG_PORT ;           //// handle error wrong port
	}
	
	return OK;
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	08 95       	ret
			else return WRONG_DIRECTION;                //// handle error wrong direction
			break;
		
		case 'B':
			if(direction==IN) DDRB &=~(1<<pinNum) ;  //input
			else if(direction==OUT) DDRB |=(1<<pinNum) ; //output
 302:	41 30       	cpi	r20, 0x01	; 1
 304:	09 f0       	breq	.+2      	; 0x308 <DIO_init+0x80>
 306:	4c c0       	rjmp	.+152    	; 0x3a0 <DIO_init+0x118>
 308:	27 b3       	in	r18, 0x17	; 23
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_init+0x8c>
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	6a 95       	dec	r22
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_init+0x88>
 318:	82 2b       	or	r24, r18
 31a:	87 bb       	out	0x17, r24	; 23
			break;
	
		default: return WRONG_PORT ;           //// handle error wrong port
	}
	
	return OK;
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	08 95       	ret
			else if(direction==OUT) DDRB |=(1<<pinNum) ; //output
			else return WRONG_DIRECTION;                //// handle error wrong direction
			break;	
		
		case 'C':
			if(direction==IN) DDRC &=~(1<<pinNum) ;  //input
 320:	41 11       	cpse	r20, r1
 322:	0d c0       	rjmp	.+26     	; 0x33e <DIO_init+0xb6>
 324:	24 b3       	in	r18, 0x14	; 20
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_init+0xa8>
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	6a 95       	dec	r22
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_init+0xa4>
 334:	80 95       	com	r24
 336:	82 23       	and	r24, r18
 338:	84 bb       	out	0x14, r24	; 20
			break;
	
		default: return WRONG_PORT ;           //// handle error wrong port
	}
	
	return OK;
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	08 95       	ret
			else return WRONG_DIRECTION;                //// handle error wrong direction
			break;	
		
		case 'C':
			if(direction==IN) DDRC &=~(1<<pinNum) ;  //input
			else if(direction==OUT) DDRC |=(1<<pinNum) ; //output
 33e:	41 30       	cpi	r20, 0x01	; 1
 340:	89 f5       	brne	.+98     	; 0x3a4 <DIO_init+0x11c>
 342:	24 b3       	in	r18, 0x14	; 20
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	02 c0       	rjmp	.+4      	; 0x34e <DIO_init+0xc6>
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	6a 95       	dec	r22
 350:	e2 f7       	brpl	.-8      	; 0x34a <DIO_init+0xc2>
 352:	82 2b       	or	r24, r18
 354:	84 bb       	out	0x14, r24	; 20
			break;
	
		default: return WRONG_PORT ;           //// handle error wrong port
	}
	
	return OK;
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	08 95       	ret
			else if(direction==OUT) DDRC |=(1<<pinNum) ; //output
			else return WRONG_DIRECTION;                //// handle error wrong direction
			break;		
		
		case 'D':
			if(direction==IN) DDRD &=~(1<<pinNum) ;  //input
 35a:	41 11       	cpse	r20, r1
 35c:	0d c0       	rjmp	.+26     	; 0x378 <DIO_init+0xf0>
 35e:	21 b3       	in	r18, 0x11	; 17
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	02 c0       	rjmp	.+4      	; 0x36a <DIO_init+0xe2>
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	6a 95       	dec	r22
 36c:	e2 f7       	brpl	.-8      	; 0x366 <DIO_init+0xde>
 36e:	80 95       	com	r24
 370:	82 23       	and	r24, r18
 372:	81 bb       	out	0x11, r24	; 17
			break;
	
		default: return WRONG_PORT ;           //// handle error wrong port
	}
	
	return OK;
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	08 95       	ret
			else return WRONG_DIRECTION;                //// handle error wrong direction
			break;		
		
		case 'D':
			if(direction==IN) DDRD &=~(1<<pinNum) ;  //input
			else if(direction==OUT) DDRD |=(1<<pinNum) ; //output
 378:	41 30       	cpi	r20, 0x01	; 1
 37a:	b1 f4       	brne	.+44     	; 0x3a8 <DIO_init+0x120>
 37c:	21 b3       	in	r18, 0x11	; 17
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_init+0x100>
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	6a 95       	dec	r22
 38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_init+0xfc>
 38c:	82 2b       	or	r24, r18
 38e:	81 bb       	out	0x11, r24	; 17
			break;
	
		default: return WRONG_PORT ;           //// handle error wrong port
	}
	
	return OK;
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	08 95       	ret

#include "dio.h"

EN_DIO_ERROR_t DIO_init(uint8_t portNum, uint8_t pinNum, uint8_t direction)
{
	if(pinNum>7 || pinNum<0) return WRONG_PIN;  // handle error wrong pin 
 394:	82 e0       	ldi	r24, 0x02	; 2
 396:	08 95       	ret
			if(direction==IN) DDRD &=~(1<<pinNum) ;  //input
			else if(direction==OUT) DDRD |=(1<<pinNum) ; //output
			else return WRONG_DIRECTION;                //// handle error wrong direction
			break;
	
		default: return WRONG_PORT ;           //// handle error wrong port
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	08 95       	ret
	switch (portNum)
	{
		case 'A':
			if(direction==IN) DDRA &=~(1<<pinNum) ;  //input
			else if(direction==OUT) DDRA |=(1<<pinNum) ; //output
			else return WRONG_DIRECTION;                //// handle error wrong direction
 39c:	83 e0       	ldi	r24, 0x03	; 3
 39e:	08 95       	ret
			break;
		
		case 'B':
			if(direction==IN) DDRB &=~(1<<pinNum) ;  //input
			else if(direction==OUT) DDRB |=(1<<pinNum) ; //output
			else return WRONG_DIRECTION;                //// handle error wrong direction
 3a0:	83 e0       	ldi	r24, 0x03	; 3
 3a2:	08 95       	ret
			break;	
		
		case 'C':
			if(direction==IN) DDRC &=~(1<<pinNum) ;  //input
			else if(direction==OUT) DDRC |=(1<<pinNum) ; //output
			else return WRONG_DIRECTION;                //// handle error wrong direction
 3a4:	83 e0       	ldi	r24, 0x03	; 3
 3a6:	08 95       	ret
			break;		
		
		case 'D':
			if(direction==IN) DDRD &=~(1<<pinNum) ;  //input
			else if(direction==OUT) DDRD |=(1<<pinNum) ; //output
			else return WRONG_DIRECTION;                //// handle error wrong direction
 3a8:	83 e0       	ldi	r24, 0x03	; 3
	
		default: return WRONG_PORT ;           //// handle error wrong port
	}
	
	return OK;
}
 3aa:	08 95       	ret

000003ac <DIO_write>:


EN_DIO_ERROR_t DIO_write(uint8_t portNum, uint8_t pinNum, uint8_t value)

{
	if(pinNum>7 || pinNum<0) return WRONG_PIN;  // handle error wrong pin 
 3ac:	68 30       	cpi	r22, 0x08	; 8
 3ae:	08 f0       	brcs	.+2      	; 0x3b2 <DIO_write+0x6>
 3b0:	83 c0       	rjmp	.+262    	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
	switch (portNum)
 3b2:	82 34       	cpi	r24, 0x42	; 66
 3b4:	49 f1       	breq	.+82     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3b6:	18 f4       	brcc	.+6      	; 0x3be <DIO_write+0x12>
 3b8:	81 34       	cpi	r24, 0x41	; 65
 3ba:	41 f0       	breq	.+16     	; 0x3cc <DIO_write+0x20>
 3bc:	7f c0       	rjmp	.+254    	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 3be:	83 34       	cpi	r24, 0x43	; 67
 3c0:	09 f4       	brne	.+2      	; 0x3c4 <DIO_write+0x18>
 3c2:	40 c0       	rjmp	.+128    	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 3c4:	84 34       	cpi	r24, 0x44	; 68
 3c6:	09 f4       	brne	.+2      	; 0x3ca <DIO_write+0x1e>
 3c8:	5a c0       	rjmp	.+180    	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 3ca:	78 c0       	rjmp	.+240    	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
	{
		case 'A':
		if(value==LOW) PORTA &=~(1<<pinNum) ;  //
 3cc:	41 11       	cpse	r20, r1
 3ce:	0d c0       	rjmp	.+26     	; 0x3ea <DIO_write+0x3e>
 3d0:	2b b3       	in	r18, 0x1b	; 27
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <DIO_write+0x30>
 3d8:	88 0f       	add	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	6a 95       	dec	r22
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <DIO_write+0x2c>
 3e0:	80 95       	com	r24
 3e2:	82 23       	and	r24, r18
 3e4:	8b bb       	out	0x1b, r24	; 27
		
		default: return WRONG_PORT ;           //// handle error wrong port
		
	}
	
	return OK;
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	08 95       	ret
	if(pinNum>7 || pinNum<0) return WRONG_PIN;  // handle error wrong pin 
	switch (portNum)
	{
		case 'A':
		if(value==LOW) PORTA &=~(1<<pinNum) ;  //
		else if(value==HIGH) PORTA |=(1<<pinNum) ; //
 3ea:	41 30       	cpi	r20, 0x01	; 1
 3ec:	09 f0       	breq	.+2      	; 0x3f0 <DIO_write+0x44>
 3ee:	68 c0       	rjmp	.+208    	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
 3f0:	2b b3       	in	r18, 0x1b	; 27
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <DIO_write+0x50>
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	6a 95       	dec	r22
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <DIO_write+0x4c>
 400:	82 2b       	or	r24, r18
 402:	8b bb       	out	0x1b, r24	; 27
		
		default: return WRONG_PORT ;           //// handle error wrong port
		
	}
	
	return OK;
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	08 95       	ret
		else if(value==HIGH) PORTA |=(1<<pinNum) ; //
		else return WRONG_VALUE;                //// handle error wrong value
		break;
		
		case 'B':
		if(value==LOW) PORTB &=~(1<<pinNum) ;  //
 408:	41 11       	cpse	r20, r1
 40a:	0d c0       	rjmp	.+26     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 40c:	28 b3       	in	r18, 0x18	; 24
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	02 c0       	rjmp	.+4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 414:	88 0f       	add	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	6a 95       	dec	r22
 41a:	e2 f7       	brpl	.-8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 41c:	80 95       	com	r24
 41e:	82 23       	and	r24, r18
 420:	88 bb       	out	0x18, r24	; 24
		
		default: return WRONG_PORT ;           //// handle error wrong port
		
	}
	
	return OK;
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	08 95       	ret
		else return WRONG_VALUE;                //// handle error wrong value
		break;
		
		case 'B':
		if(value==LOW) PORTB &=~(1<<pinNum) ;  //
		else if(value==HIGH) PORTB |=(1<<pinNum) ; //
 426:	41 30       	cpi	r20, 0x01	; 1
 428:	09 f0       	breq	.+2      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 42a:	4c c0       	rjmp	.+152    	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 42c:	28 b3       	in	r18, 0x18	; 24
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	02 c0       	rjmp	.+4      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 434:	88 0f       	add	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	6a 95       	dec	r22
 43a:	e2 f7       	brpl	.-8      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 43c:	82 2b       	or	r24, r18
 43e:	88 bb       	out	0x18, r24	; 24
		
		default: return WRONG_PORT ;           //// handle error wrong port
		
	}
	
	return OK;
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	08 95       	ret
		else if(value==HIGH) PORTB |=(1<<pinNum) ; //
		else return WRONG_VALUE;
		break;
		
		case 'C':
		if(value==LOW) PORTC &=~(1<<pinNum) ;  //
 444:	41 11       	cpse	r20, r1
 446:	0d c0       	rjmp	.+26     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 448:	25 b3       	in	r18, 0x15	; 21
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	02 c0       	rjmp	.+4      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 450:	88 0f       	add	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	6a 95       	dec	r22
 456:	e2 f7       	brpl	.-8      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 458:	80 95       	com	r24
 45a:	82 23       	and	r24, r18
 45c:	85 bb       	out	0x15, r24	; 21
		
		default: return WRONG_PORT ;           //// handle error wrong port
		
	}
	
	return OK;
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	08 95       	ret
		else return WRONG_VALUE;
		break;
		
		case 'C':
		if(value==LOW) PORTC &=~(1<<pinNum) ;  //
		else if(value==HIGH) PORTC |=(1<<pinNum) ; //
 462:	41 30       	cpi	r20, 0x01	; 1
 464:	89 f5       	brne	.+98     	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 466:	25 b3       	in	r18, 0x15	; 21
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	02 c0       	rjmp	.+4      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 46e:	88 0f       	add	r24, r24
 470:	99 1f       	adc	r25, r25
 472:	6a 95       	dec	r22
 474:	e2 f7       	brpl	.-8      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 476:	82 2b       	or	r24, r18
 478:	85 bb       	out	0x15, r24	; 21
		
		default: return WRONG_PORT ;           //// handle error wrong port
		
	}
	
	return OK;
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	08 95       	ret
		else return WRONG_VALUE;
		break;
		
		
		case 'D':
		if(value==LOW) PORTD &=~(1<<pinNum) ;  //
 47e:	41 11       	cpse	r20, r1
 480:	0d c0       	rjmp	.+26     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 482:	22 b3       	in	r18, 0x12	; 18
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	02 c0       	rjmp	.+4      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 48a:	88 0f       	add	r24, r24
 48c:	99 1f       	adc	r25, r25
 48e:	6a 95       	dec	r22
 490:	e2 f7       	brpl	.-8      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 492:	80 95       	com	r24
 494:	82 23       	and	r24, r18
 496:	82 bb       	out	0x12, r24	; 18
		
		default: return WRONG_PORT ;           //// handle error wrong port
		
	}
	
	return OK;
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	08 95       	ret
		break;
		
		
		case 'D':
		if(value==LOW) PORTD &=~(1<<pinNum) ;  //
		else if(value==HIGH) PORTD |=(1<<pinNum) ; //
 49c:	41 30       	cpi	r20, 0x01	; 1
 49e:	b1 f4       	brne	.+44     	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 4a0:	22 b3       	in	r18, 0x12	; 18
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	02 c0       	rjmp	.+4      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 4a8:	88 0f       	add	r24, r24
 4aa:	99 1f       	adc	r25, r25
 4ac:	6a 95       	dec	r22
 4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 4b0:	82 2b       	or	r24, r18
 4b2:	82 bb       	out	0x12, r24	; 18
		
		default: return WRONG_PORT ;           //// handle error wrong port
		
	}
	
	return OK;
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	08 95       	ret


EN_DIO_ERROR_t DIO_write(uint8_t portNum, uint8_t pinNum, uint8_t value)

{
	if(pinNum>7 || pinNum<0) return WRONG_PIN;  // handle error wrong pin 
 4b8:	82 e0       	ldi	r24, 0x02	; 2
 4ba:	08 95       	ret
		if(value==LOW) PORTD &=~(1<<pinNum) ;  //
		else if(value==HIGH) PORTD |=(1<<pinNum) ; //
		else return WRONG_VALUE;
		break;
		
		default: return WRONG_PORT ;           //// handle error wrong port
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	08 95       	ret
	switch (portNum)
	{
		case 'A':
		if(value==LOW) PORTA &=~(1<<pinNum) ;  //
		else if(value==HIGH) PORTA |=(1<<pinNum) ; //
		else return WRONG_VALUE;                //// handle error wrong value
 4c0:	84 e0       	ldi	r24, 0x04	; 4
 4c2:	08 95       	ret
		break;
		
		case 'B':
		if(value==LOW) PORTB &=~(1<<pinNum) ;  //
		else if(value==HIGH) PORTB |=(1<<pinNum) ; //
		else return WRONG_VALUE;
 4c4:	84 e0       	ldi	r24, 0x04	; 4
 4c6:	08 95       	ret
		break;
		
		case 'C':
		if(value==LOW) PORTC &=~(1<<pinNum) ;  //
		else if(value==HIGH) PORTC |=(1<<pinNum) ; //
		else return WRONG_VALUE;
 4c8:	84 e0       	ldi	r24, 0x04	; 4
 4ca:	08 95       	ret
		
		
		case 'D':
		if(value==LOW) PORTD &=~(1<<pinNum) ;  //
		else if(value==HIGH) PORTD |=(1<<pinNum) ; //
		else return WRONG_VALUE;
 4cc:	84 e0       	ldi	r24, 0x04	; 4
		default: return WRONG_PORT ;           //// handle error wrong port
		
	}
	
	return OK;
}
 4ce:	08 95       	ret

000004d0 <DIO_toggle>:



EN_DIO_ERROR_t DIO_toggle(uint8_t portNum, uint8_t pinNum)    
{  
	if(pinNum>7 || pinNum<0) return WRONG_PIN;  // handle error wrong pin 
 4d0:	68 30       	cpi	r22, 0x08	; 8
 4d2:	d8 f5       	brcc	.+118    	; 0x54a <DIO_toggle+0x7a>
	switch (portNum)
 4d4:	82 34       	cpi	r24, 0x42	; 66
 4d6:	a9 f0       	breq	.+42     	; 0x502 <DIO_toggle+0x32>
 4d8:	18 f4       	brcc	.+6      	; 0x4e0 <DIO_toggle+0x10>
 4da:	81 34       	cpi	r24, 0x41	; 65
 4dc:	31 f0       	breq	.+12     	; 0x4ea <DIO_toggle+0x1a>
 4de:	37 c0       	rjmp	.+110    	; 0x54e <DIO_toggle+0x7e>
 4e0:	83 34       	cpi	r24, 0x43	; 67
 4e2:	d9 f0       	breq	.+54     	; 0x51a <DIO_toggle+0x4a>
 4e4:	84 34       	cpi	r24, 0x44	; 68
 4e6:	29 f1       	breq	.+74     	; 0x532 <DIO_toggle+0x62>
 4e8:	32 c0       	rjmp	.+100    	; 0x54e <DIO_toggle+0x7e>
	{
		case 'A':
		 PORTA ^= (1<<pinNum);
 4ea:	2b b3       	in	r18, 0x1b	; 27
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <DIO_toggle+0x26>
 4f2:	88 0f       	add	r24, r24
 4f4:	99 1f       	adc	r25, r25
 4f6:	6a 95       	dec	r22
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <DIO_toggle+0x22>
 4fa:	82 27       	eor	r24, r18
 4fc:	8b bb       	out	0x1b, r24	; 27
		
		break;
		
		default: return WRONG_PORT ;           //// handle error wrong port
	}
return OK;
 4fe:	80 e0       	ldi	r24, 0x00	; 0
	switch (portNum)
	{
		case 'A':
		 PORTA ^= (1<<pinNum);
		
		break;
 500:	08 95       	ret
		
		case 'B':
		 PORTB ^= (1<<pinNum);
 502:	28 b3       	in	r18, 0x18	; 24
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	02 c0       	rjmp	.+4      	; 0x50e <DIO_toggle+0x3e>
 50a:	88 0f       	add	r24, r24
 50c:	99 1f       	adc	r25, r25
 50e:	6a 95       	dec	r22
 510:	e2 f7       	brpl	.-8      	; 0x50a <DIO_toggle+0x3a>
 512:	82 27       	eor	r24, r18
 514:	88 bb       	out	0x18, r24	; 24
		
		break;
		
		default: return WRONG_PORT ;           //// handle error wrong port
	}
return OK;
 516:	80 e0       	ldi	r24, 0x00	; 0
		break;
		
		case 'B':
		 PORTB ^= (1<<pinNum);
		
		break;
 518:	08 95       	ret
		
		case 'C':
		  PORTC ^= (1<<pinNum);
 51a:	25 b3       	in	r18, 0x15	; 21
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	02 c0       	rjmp	.+4      	; 0x526 <DIO_toggle+0x56>
 522:	88 0f       	add	r24, r24
 524:	99 1f       	adc	r25, r25
 526:	6a 95       	dec	r22
 528:	e2 f7       	brpl	.-8      	; 0x522 <DIO_toggle+0x52>
 52a:	82 27       	eor	r24, r18
 52c:	85 bb       	out	0x15, r24	; 21
		
		break;
		
		default: return WRONG_PORT ;           //// handle error wrong port
	}
return OK;
 52e:	80 e0       	ldi	r24, 0x00	; 0
		break;
		
		case 'C':
		  PORTC ^= (1<<pinNum);
		
		break;
 530:	08 95       	ret
		
		case 'D':
		  PORTD ^= (1<<pinNum);
 532:	22 b3       	in	r18, 0x12	; 18
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	02 c0       	rjmp	.+4      	; 0x53e <DIO_toggle+0x6e>
 53a:	88 0f       	add	r24, r24
 53c:	99 1f       	adc	r25, r25
 53e:	6a 95       	dec	r22
 540:	e2 f7       	brpl	.-8      	; 0x53a <DIO_toggle+0x6a>
 542:	82 27       	eor	r24, r18
 544:	82 bb       	out	0x12, r24	; 18
		
		break;
		
		default: return WRONG_PORT ;           //// handle error wrong port
	}
return OK;
 546:	80 e0       	ldi	r24, 0x00	; 0
		break;
		
		case 'D':
		  PORTD ^= (1<<pinNum);
		
		break;
 548:	08 95       	ret



EN_DIO_ERROR_t DIO_toggle(uint8_t portNum, uint8_t pinNum)    
{  
	if(pinNum>7 || pinNum<0) return WRONG_PIN;  // handle error wrong pin 
 54a:	82 e0       	ldi	r24, 0x02	; 2
 54c:	08 95       	ret
		case 'D':
		  PORTD ^= (1<<pinNum);
		
		break;
		
		default: return WRONG_PORT ;           //// handle error wrong port
 54e:	81 e0       	ldi	r24, 0x01	; 1
	}
return OK;
}
 550:	08 95       	ret

00000552 <timer0_init>:
#include "timer.h"
#include <math.h>    // to use ceil()

void timer0_init()
{
	TCCR0 = 0x00;      //normal mode
 552:	13 be       	out	0x33, r1	; 51
 554:	08 95       	ret

00000556 <timer0_delay>:

int overFlowCounter = 0;
int numberOfOverflows = 1;

void timer0_delay(unsigned int millisecond)
{
 556:	8f 92       	push	r8
 558:	9f 92       	push	r9
 55a:	af 92       	push	r10
 55c:	bf 92       	push	r11
 55e:	cf 92       	push	r12
 560:	df 92       	push	r13
 562:	ef 92       	push	r14
 564:	ff 92       	push	r15
	overFlowCounter = 0;
 566:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <overFlowCounter+0x1>
 56a:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <overFlowCounter>
	//2 max delay time in ms
	float max_delay = 0.256;      //         //ticktime * 2^8
	//3 number of over flows
	//uint8_t numberOfOverflows = 1; //= ;
	
	if(millisecond > max_delay)               //if required delay > max delay time
 56e:	bc 01       	movw	r22, r24
 570:	80 e0       	ldi	r24, 0x00	; 0
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
 578:	6b 01       	movw	r12, r22
 57a:	7c 01       	movw	r14, r24
 57c:	2f e6       	ldi	r18, 0x6F	; 111
 57e:	32 e1       	ldi	r19, 0x12	; 18
 580:	43 e8       	ldi	r20, 0x83	; 131
 582:	5e e3       	ldi	r21, 0x3E	; 62
 584:	0e 94 6c 05 	call	0xad8	; 0xad8 <__gesf2>
 588:	18 16       	cp	r1, r24
 58a:	a4 f5       	brge	.+104    	; 0x5f4 <timer0_delay+0x9e>
	{
		//3 get number of over flows
		numberOfOverflows = ceil(millisecond/max_delay);
 58c:	2f e6       	ldi	r18, 0x6F	; 111
 58e:	32 e1       	ldi	r19, 0x12	; 18
 590:	43 e8       	ldi	r20, 0x83	; 131
 592:	5e e3       	ldi	r21, 0x3E	; 62
 594:	c7 01       	movw	r24, r14
 596:	b6 01       	movw	r22, r12
 598:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__divsf3>
 59c:	0e 94 b5 03 	call	0x76a	; 0x76a <ceil>
 5a0:	0e 94 43 04 	call	0x886	; 0x886 <__fixsfsi>
 5a4:	4b 01       	movw	r8, r22
 5a6:	5c 01       	movw	r10, r24
 5a8:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 5ac:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__DATA_REGION_ORIGIN__>
		//int num = (millisecond/max_delay);
		//numberOfOverflows = num +1 ;
		//4 timer initial value
		TCNT0 = 256 - (millisecond/tick_time)/numberOfOverflows ;
 5b0:	2f e6       	ldi	r18, 0x6F	; 111
 5b2:	32 e1       	ldi	r19, 0x12	; 18
 5b4:	43 e8       	ldi	r20, 0x83	; 131
 5b6:	5a e3       	ldi	r21, 0x3A	; 58
 5b8:	c7 01       	movw	r24, r14
 5ba:	b6 01       	movw	r22, r12
 5bc:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__divsf3>
 5c0:	6b 01       	movw	r12, r22
 5c2:	7c 01       	movw	r14, r24
 5c4:	b4 01       	movw	r22, r8
 5c6:	99 0c       	add	r9, r9
 5c8:	88 0b       	sbc	r24, r24
 5ca:	99 0b       	sbc	r25, r25
 5cc:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__floatsisf>
 5d0:	9b 01       	movw	r18, r22
 5d2:	ac 01       	movw	r20, r24
 5d4:	c7 01       	movw	r24, r14
 5d6:	b6 01       	movw	r22, r12
 5d8:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__divsf3>
 5dc:	9b 01       	movw	r18, r22
 5de:	ac 01       	movw	r20, r24
 5e0:	60 e0       	ldi	r22, 0x00	; 0
 5e2:	70 e0       	ldi	r23, 0x00	; 0
 5e4:	80 e8       	ldi	r24, 0x80	; 128
 5e6:	93 e4       	ldi	r25, 0x43	; 67
 5e8:	0e 94 48 03 	call	0x690	; 0x690 <__subsf3>
 5ec:	0e 94 4a 04 	call	0x894	; 0x894 <__fixunssfsi>
 5f0:	62 bf       	out	0x32, r22	; 50
 5f2:	1d c0       	rjmp	.+58     	; 0x62e <timer0_delay+0xd8>
	}
	
	else if(millisecond < max_delay)           // else if required delay < max delay
 5f4:	2f e6       	ldi	r18, 0x6F	; 111
 5f6:	32 e1       	ldi	r19, 0x12	; 18
 5f8:	43 e8       	ldi	r20, 0x83	; 131
 5fa:	5e e3       	ldi	r21, 0x3E	; 62
 5fc:	c7 01       	movw	r24, r14
 5fe:	b6 01       	movw	r22, r12
 600:	0e 94 cc 03 	call	0x798	; 0x798 <__cmpsf2>
 604:	88 23       	and	r24, r24
 606:	94 f4       	brge	.+36     	; 0x62c <timer0_delay+0xd6>
	{
		//4 timer initial value
		TCNT0 = (max_delay - millisecond)/tick_time ;		
 608:	a7 01       	movw	r20, r14
 60a:	96 01       	movw	r18, r12
 60c:	6f e6       	ldi	r22, 0x6F	; 111
 60e:	72 e1       	ldi	r23, 0x12	; 18
 610:	83 e8       	ldi	r24, 0x83	; 131
 612:	9e e3       	ldi	r25, 0x3E	; 62
 614:	0e 94 48 03 	call	0x690	; 0x690 <__subsf3>
 618:	2f e6       	ldi	r18, 0x6F	; 111
 61a:	32 e1       	ldi	r19, 0x12	; 18
 61c:	43 e8       	ldi	r20, 0x83	; 131
 61e:	5a e3       	ldi	r21, 0x3A	; 58
 620:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__divsf3>
 624:	0e 94 4a 04 	call	0x894	; 0x894 <__fixunssfsi>
 628:	62 bf       	out	0x32, r22	; 50
 62a:	01 c0       	rjmp	.+2      	; 0x62e <timer0_delay+0xd8>
	}
	
	else                                      // required delay = max delay
	{
		//4 timer initial value
		TCNT0 = 0;
 62c:	12 be       	out	0x32, r1	; 50
	
	
	//TCCR0 |= (1<<1) | (1<<0); //set 64 Prescaler   //start timer
	
	//TCCR0 |= (1<<2) | (1<<0); //set 1024 Prescaler   //start timer
	TCCR0 |= (1<<0);     //no prescaler
 62e:	83 b7       	in	r24, 0x33	; 51
 630:	81 60       	ori	r24, 0x01	; 1
 632:	83 bf       	out	0x33, r24	; 51

	while(overFlowCounter < numberOfOverflows)
 634:	0f c0       	rjmp	.+30     	; 0x654 <timer0_delay+0xfe>
	{
		//wait until over flow flag is set
		while((TIFR & (1<<0)) == 0 );
 636:	08 b6       	in	r0, 0x38	; 56
 638:	00 fe       	sbrs	r0, 0
 63a:	fd cf       	rjmp	.-6      	; 0x636 <timer0_delay+0xe0>

		//clear over flow flag
		TIFR |= (1<<0);
 63c:	88 b7       	in	r24, 0x38	; 56
 63e:	81 60       	ori	r24, 0x01	; 1
 640:	88 bf       	out	0x38, r24	; 56

		overFlowCounter++;
 642:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <overFlowCounter>
 646:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <overFlowCounter+0x1>
 64a:	01 96       	adiw	r24, 0x01	; 1
 64c:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <overFlowCounter+0x1>
 650:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <overFlowCounter>
	//TCCR0 |= (1<<1) | (1<<0); //set 64 Prescaler   //start timer
	
	//TCCR0 |= (1<<2) | (1<<0); //set 1024 Prescaler   //start timer
	TCCR0 |= (1<<0);     //no prescaler

	while(overFlowCounter < numberOfOverflows)
 654:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <overFlowCounter>
 658:	30 91 64 00 	lds	r19, 0x0064	; 0x800064 <overFlowCounter+0x1>
 65c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 660:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 664:	28 17       	cp	r18, r24
 666:	39 07       	cpc	r19, r25
 668:	34 f3       	brlt	.-52     	; 0x636 <timer0_delay+0xe0>

		overFlowCounter++;

	}

	TCCR0 = 0x00;           //stop timer
 66a:	13 be       	out	0x33, r1	; 51

}
 66c:	ff 90       	pop	r15
 66e:	ef 90       	pop	r14
 670:	df 90       	pop	r13
 672:	cf 90       	pop	r12
 674:	bf 90       	pop	r11
 676:	af 90       	pop	r10
 678:	9f 90       	pop	r9
 67a:	8f 90       	pop	r8
 67c:	08 95       	ret

0000067e <delay_stop>:



void delay_stop()
{
	overFlowCounter = numberOfOverflows;
 67e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 682:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 686:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <overFlowCounter+0x1>
 68a:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <overFlowCounter>
 68e:	08 95       	ret

00000690 <__subsf3>:
 690:	50 58       	subi	r21, 0x80	; 128

00000692 <__addsf3>:
 692:	bb 27       	eor	r27, r27
 694:	aa 27       	eor	r26, r26
 696:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__addsf3x>
 69a:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__fp_round>
 69e:	0e 94 0c 05 	call	0xa18	; 0xa18 <__fp_pscA>
 6a2:	38 f0       	brcs	.+14     	; 0x6b2 <__addsf3+0x20>
 6a4:	0e 94 13 05 	call	0xa26	; 0xa26 <__fp_pscB>
 6a8:	20 f0       	brcs	.+8      	; 0x6b2 <__addsf3+0x20>
 6aa:	39 f4       	brne	.+14     	; 0x6ba <__addsf3+0x28>
 6ac:	9f 3f       	cpi	r25, 0xFF	; 255
 6ae:	19 f4       	brne	.+6      	; 0x6b6 <__addsf3+0x24>
 6b0:	26 f4       	brtc	.+8      	; 0x6ba <__addsf3+0x28>
 6b2:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__fp_nan>
 6b6:	0e f4       	brtc	.+2      	; 0x6ba <__addsf3+0x28>
 6b8:	e0 95       	com	r30
 6ba:	e7 fb       	bst	r30, 7
 6bc:	0c 94 da 04 	jmp	0x9b4	; 0x9b4 <__fp_inf>

000006c0 <__addsf3x>:
 6c0:	e9 2f       	mov	r30, r25
 6c2:	0e 94 2b 05 	call	0xa56	; 0xa56 <__fp_split3>
 6c6:	58 f3       	brcs	.-42     	; 0x69e <__addsf3+0xc>
 6c8:	ba 17       	cp	r27, r26
 6ca:	62 07       	cpc	r22, r18
 6cc:	73 07       	cpc	r23, r19
 6ce:	84 07       	cpc	r24, r20
 6d0:	95 07       	cpc	r25, r21
 6d2:	20 f0       	brcs	.+8      	; 0x6dc <__addsf3x+0x1c>
 6d4:	79 f4       	brne	.+30     	; 0x6f4 <__addsf3x+0x34>
 6d6:	a6 f5       	brtc	.+104    	; 0x740 <__addsf3x+0x80>
 6d8:	0c 94 65 05 	jmp	0xaca	; 0xaca <__fp_zero>
 6dc:	0e f4       	brtc	.+2      	; 0x6e0 <__addsf3x+0x20>
 6de:	e0 95       	com	r30
 6e0:	0b 2e       	mov	r0, r27
 6e2:	ba 2f       	mov	r27, r26
 6e4:	a0 2d       	mov	r26, r0
 6e6:	0b 01       	movw	r0, r22
 6e8:	b9 01       	movw	r22, r18
 6ea:	90 01       	movw	r18, r0
 6ec:	0c 01       	movw	r0, r24
 6ee:	ca 01       	movw	r24, r20
 6f0:	a0 01       	movw	r20, r0
 6f2:	11 24       	eor	r1, r1
 6f4:	ff 27       	eor	r31, r31
 6f6:	59 1b       	sub	r21, r25
 6f8:	99 f0       	breq	.+38     	; 0x720 <__addsf3x+0x60>
 6fa:	59 3f       	cpi	r21, 0xF9	; 249
 6fc:	50 f4       	brcc	.+20     	; 0x712 <__addsf3x+0x52>
 6fe:	50 3e       	cpi	r21, 0xE0	; 224
 700:	68 f1       	brcs	.+90     	; 0x75c <__addsf3x+0x9c>
 702:	1a 16       	cp	r1, r26
 704:	f0 40       	sbci	r31, 0x00	; 0
 706:	a2 2f       	mov	r26, r18
 708:	23 2f       	mov	r18, r19
 70a:	34 2f       	mov	r19, r20
 70c:	44 27       	eor	r20, r20
 70e:	58 5f       	subi	r21, 0xF8	; 248
 710:	f3 cf       	rjmp	.-26     	; 0x6f8 <__addsf3x+0x38>
 712:	46 95       	lsr	r20
 714:	37 95       	ror	r19
 716:	27 95       	ror	r18
 718:	a7 95       	ror	r26
 71a:	f0 40       	sbci	r31, 0x00	; 0
 71c:	53 95       	inc	r21
 71e:	c9 f7       	brne	.-14     	; 0x712 <__addsf3x+0x52>
 720:	7e f4       	brtc	.+30     	; 0x740 <__addsf3x+0x80>
 722:	1f 16       	cp	r1, r31
 724:	ba 0b       	sbc	r27, r26
 726:	62 0b       	sbc	r22, r18
 728:	73 0b       	sbc	r23, r19
 72a:	84 0b       	sbc	r24, r20
 72c:	ba f0       	brmi	.+46     	; 0x75c <__addsf3x+0x9c>
 72e:	91 50       	subi	r25, 0x01	; 1
 730:	a1 f0       	breq	.+40     	; 0x75a <__addsf3x+0x9a>
 732:	ff 0f       	add	r31, r31
 734:	bb 1f       	adc	r27, r27
 736:	66 1f       	adc	r22, r22
 738:	77 1f       	adc	r23, r23
 73a:	88 1f       	adc	r24, r24
 73c:	c2 f7       	brpl	.-16     	; 0x72e <__addsf3x+0x6e>
 73e:	0e c0       	rjmp	.+28     	; 0x75c <__addsf3x+0x9c>
 740:	ba 0f       	add	r27, r26
 742:	62 1f       	adc	r22, r18
 744:	73 1f       	adc	r23, r19
 746:	84 1f       	adc	r24, r20
 748:	48 f4       	brcc	.+18     	; 0x75c <__addsf3x+0x9c>
 74a:	87 95       	ror	r24
 74c:	77 95       	ror	r23
 74e:	67 95       	ror	r22
 750:	b7 95       	ror	r27
 752:	f7 95       	ror	r31
 754:	9e 3f       	cpi	r25, 0xFE	; 254
 756:	08 f0       	brcs	.+2      	; 0x75a <__addsf3x+0x9a>
 758:	b0 cf       	rjmp	.-160    	; 0x6ba <__addsf3+0x28>
 75a:	93 95       	inc	r25
 75c:	88 0f       	add	r24, r24
 75e:	08 f0       	brcs	.+2      	; 0x762 <__addsf3x+0xa2>
 760:	99 27       	eor	r25, r25
 762:	ee 0f       	add	r30, r30
 764:	97 95       	ror	r25
 766:	87 95       	ror	r24
 768:	08 95       	ret

0000076a <ceil>:
 76a:	0e 94 4d 05 	call	0xa9a	; 0xa9a <__fp_trunc>
 76e:	90 f0       	brcs	.+36     	; 0x794 <ceil+0x2a>
 770:	9f 37       	cpi	r25, 0x7F	; 127
 772:	48 f4       	brcc	.+18     	; 0x786 <ceil+0x1c>
 774:	91 11       	cpse	r25, r1
 776:	16 f4       	brtc	.+4      	; 0x77c <ceil+0x12>
 778:	0c 94 66 05 	jmp	0xacc	; 0xacc <__fp_szero>
 77c:	60 e0       	ldi	r22, 0x00	; 0
 77e:	70 e0       	ldi	r23, 0x00	; 0
 780:	80 e8       	ldi	r24, 0x80	; 128
 782:	9f e3       	ldi	r25, 0x3F	; 63
 784:	08 95       	ret
 786:	26 f0       	brts	.+8      	; 0x790 <ceil+0x26>
 788:	1b 16       	cp	r1, r27
 78a:	61 1d       	adc	r22, r1
 78c:	71 1d       	adc	r23, r1
 78e:	81 1d       	adc	r24, r1
 790:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__fp_mintl>
 794:	0c 94 fb 04 	jmp	0x9f6	; 0x9f6 <__fp_mpack>

00000798 <__cmpsf2>:
 798:	0e 94 b6 04 	call	0x96c	; 0x96c <__fp_cmp>
 79c:	08 f4       	brcc	.+2      	; 0x7a0 <__cmpsf2+0x8>
 79e:	81 e0       	ldi	r24, 0x01	; 1
 7a0:	08 95       	ret

000007a2 <__divsf3>:
 7a2:	0e 94 e5 03 	call	0x7ca	; 0x7ca <__divsf3x>
 7a6:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__fp_round>
 7aa:	0e 94 13 05 	call	0xa26	; 0xa26 <__fp_pscB>
 7ae:	58 f0       	brcs	.+22     	; 0x7c6 <__divsf3+0x24>
 7b0:	0e 94 0c 05 	call	0xa18	; 0xa18 <__fp_pscA>
 7b4:	40 f0       	brcs	.+16     	; 0x7c6 <__divsf3+0x24>
 7b6:	29 f4       	brne	.+10     	; 0x7c2 <__divsf3+0x20>
 7b8:	5f 3f       	cpi	r21, 0xFF	; 255
 7ba:	29 f0       	breq	.+10     	; 0x7c6 <__divsf3+0x24>
 7bc:	0c 94 da 04 	jmp	0x9b4	; 0x9b4 <__fp_inf>
 7c0:	51 11       	cpse	r21, r1
 7c2:	0c 94 66 05 	jmp	0xacc	; 0xacc <__fp_szero>
 7c6:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__fp_nan>

000007ca <__divsf3x>:
 7ca:	0e 94 2b 05 	call	0xa56	; 0xa56 <__fp_split3>
 7ce:	68 f3       	brcs	.-38     	; 0x7aa <__divsf3+0x8>

000007d0 <__divsf3_pse>:
 7d0:	99 23       	and	r25, r25
 7d2:	b1 f3       	breq	.-20     	; 0x7c0 <__divsf3+0x1e>
 7d4:	55 23       	and	r21, r21
 7d6:	91 f3       	breq	.-28     	; 0x7bc <__divsf3+0x1a>
 7d8:	95 1b       	sub	r25, r21
 7da:	55 0b       	sbc	r21, r21
 7dc:	bb 27       	eor	r27, r27
 7de:	aa 27       	eor	r26, r26
 7e0:	62 17       	cp	r22, r18
 7e2:	73 07       	cpc	r23, r19
 7e4:	84 07       	cpc	r24, r20
 7e6:	38 f0       	brcs	.+14     	; 0x7f6 <__divsf3_pse+0x26>
 7e8:	9f 5f       	subi	r25, 0xFF	; 255
 7ea:	5f 4f       	sbci	r21, 0xFF	; 255
 7ec:	22 0f       	add	r18, r18
 7ee:	33 1f       	adc	r19, r19
 7f0:	44 1f       	adc	r20, r20
 7f2:	aa 1f       	adc	r26, r26
 7f4:	a9 f3       	breq	.-22     	; 0x7e0 <__divsf3_pse+0x10>
 7f6:	35 d0       	rcall	.+106    	; 0x862 <__stack+0x3>
 7f8:	0e 2e       	mov	r0, r30
 7fa:	3a f0       	brmi	.+14     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7fc:	e0 e8       	ldi	r30, 0x80	; 128
 7fe:	32 d0       	rcall	.+100    	; 0x864 <__stack+0x5>
 800:	91 50       	subi	r25, 0x01	; 1
 802:	50 40       	sbci	r21, 0x00	; 0
 804:	e6 95       	lsr	r30
 806:	00 1c       	adc	r0, r0
 808:	ca f7       	brpl	.-14     	; 0x7fc <__divsf3_pse+0x2c>
 80a:	2b d0       	rcall	.+86     	; 0x862 <__stack+0x3>
 80c:	fe 2f       	mov	r31, r30
 80e:	29 d0       	rcall	.+82     	; 0x862 <__stack+0x3>
 810:	66 0f       	add	r22, r22
 812:	77 1f       	adc	r23, r23
 814:	88 1f       	adc	r24, r24
 816:	bb 1f       	adc	r27, r27
 818:	26 17       	cp	r18, r22
 81a:	37 07       	cpc	r19, r23
 81c:	48 07       	cpc	r20, r24
 81e:	ab 07       	cpc	r26, r27
 820:	b0 e8       	ldi	r27, 0x80	; 128
 822:	09 f0       	breq	.+2      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 824:	bb 0b       	sbc	r27, r27
 826:	80 2d       	mov	r24, r0
 828:	bf 01       	movw	r22, r30
 82a:	ff 27       	eor	r31, r31
 82c:	93 58       	subi	r25, 0x83	; 131
 82e:	5f 4f       	sbci	r21, 0xFF	; 255
 830:	3a f0       	brmi	.+14     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 832:	9e 3f       	cpi	r25, 0xFE	; 254
 834:	51 05       	cpc	r21, r1
 836:	78 f0       	brcs	.+30     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 838:	0c 94 da 04 	jmp	0x9b4	; 0x9b4 <__fp_inf>
 83c:	0c 94 66 05 	jmp	0xacc	; 0xacc <__fp_szero>
 840:	5f 3f       	cpi	r21, 0xFF	; 255
 842:	e4 f3       	brlt	.-8      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 844:	98 3e       	cpi	r25, 0xE8	; 232
 846:	d4 f3       	brlt	.-12     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 848:	86 95       	lsr	r24
 84a:	77 95       	ror	r23
 84c:	67 95       	ror	r22
 84e:	b7 95       	ror	r27
 850:	f7 95       	ror	r31
 852:	9f 5f       	subi	r25, 0xFF	; 255
 854:	c9 f7       	brne	.-14     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 856:	88 0f       	add	r24, r24
 858:	91 1d       	adc	r25, r1
 85a:	96 95       	lsr	r25
 85c:	87 95       	ror	r24
 85e:	97 f9       	bld	r25, 7
 860:	08 95       	ret
 862:	e1 e0       	ldi	r30, 0x01	; 1
 864:	66 0f       	add	r22, r22
 866:	77 1f       	adc	r23, r23
 868:	88 1f       	adc	r24, r24
 86a:	bb 1f       	adc	r27, r27
 86c:	62 17       	cp	r22, r18
 86e:	73 07       	cpc	r23, r19
 870:	84 07       	cpc	r24, r20
 872:	ba 07       	cpc	r27, r26
 874:	20 f0       	brcs	.+8      	; 0x87e <__stack+0x1f>
 876:	62 1b       	sub	r22, r18
 878:	73 0b       	sbc	r23, r19
 87a:	84 0b       	sbc	r24, r20
 87c:	ba 0b       	sbc	r27, r26
 87e:	ee 1f       	adc	r30, r30
 880:	88 f7       	brcc	.-30     	; 0x864 <__stack+0x5>
 882:	e0 95       	com	r30
 884:	08 95       	ret

00000886 <__fixsfsi>:
 886:	0e 94 4a 04 	call	0x894	; 0x894 <__fixunssfsi>
 88a:	68 94       	set
 88c:	b1 11       	cpse	r27, r1
 88e:	0c 94 66 05 	jmp	0xacc	; 0xacc <__fp_szero>
 892:	08 95       	ret

00000894 <__fixunssfsi>:
 894:	0e 94 33 05 	call	0xa66	; 0xa66 <__fp_splitA>
 898:	88 f0       	brcs	.+34     	; 0x8bc <__fixunssfsi+0x28>
 89a:	9f 57       	subi	r25, 0x7F	; 127
 89c:	98 f0       	brcs	.+38     	; 0x8c4 <__fixunssfsi+0x30>
 89e:	b9 2f       	mov	r27, r25
 8a0:	99 27       	eor	r25, r25
 8a2:	b7 51       	subi	r27, 0x17	; 23
 8a4:	b0 f0       	brcs	.+44     	; 0x8d2 <__fixunssfsi+0x3e>
 8a6:	e1 f0       	breq	.+56     	; 0x8e0 <__fixunssfsi+0x4c>
 8a8:	66 0f       	add	r22, r22
 8aa:	77 1f       	adc	r23, r23
 8ac:	88 1f       	adc	r24, r24
 8ae:	99 1f       	adc	r25, r25
 8b0:	1a f0       	brmi	.+6      	; 0x8b8 <__fixunssfsi+0x24>
 8b2:	ba 95       	dec	r27
 8b4:	c9 f7       	brne	.-14     	; 0x8a8 <__fixunssfsi+0x14>
 8b6:	14 c0       	rjmp	.+40     	; 0x8e0 <__fixunssfsi+0x4c>
 8b8:	b1 30       	cpi	r27, 0x01	; 1
 8ba:	91 f0       	breq	.+36     	; 0x8e0 <__fixunssfsi+0x4c>
 8bc:	0e 94 65 05 	call	0xaca	; 0xaca <__fp_zero>
 8c0:	b1 e0       	ldi	r27, 0x01	; 1
 8c2:	08 95       	ret
 8c4:	0c 94 65 05 	jmp	0xaca	; 0xaca <__fp_zero>
 8c8:	67 2f       	mov	r22, r23
 8ca:	78 2f       	mov	r23, r24
 8cc:	88 27       	eor	r24, r24
 8ce:	b8 5f       	subi	r27, 0xF8	; 248
 8d0:	39 f0       	breq	.+14     	; 0x8e0 <__fixunssfsi+0x4c>
 8d2:	b9 3f       	cpi	r27, 0xF9	; 249
 8d4:	cc f3       	brlt	.-14     	; 0x8c8 <__fixunssfsi+0x34>
 8d6:	86 95       	lsr	r24
 8d8:	77 95       	ror	r23
 8da:	67 95       	ror	r22
 8dc:	b3 95       	inc	r27
 8de:	d9 f7       	brne	.-10     	; 0x8d6 <__fixunssfsi+0x42>
 8e0:	3e f4       	brtc	.+14     	; 0x8f0 <__fixunssfsi+0x5c>
 8e2:	90 95       	com	r25
 8e4:	80 95       	com	r24
 8e6:	70 95       	com	r23
 8e8:	61 95       	neg	r22
 8ea:	7f 4f       	sbci	r23, 0xFF	; 255
 8ec:	8f 4f       	sbci	r24, 0xFF	; 255
 8ee:	9f 4f       	sbci	r25, 0xFF	; 255
 8f0:	08 95       	ret

000008f2 <__floatunsisf>:
 8f2:	e8 94       	clt
 8f4:	09 c0       	rjmp	.+18     	; 0x908 <__floatsisf+0x12>

000008f6 <__floatsisf>:
 8f6:	97 fb       	bst	r25, 7
 8f8:	3e f4       	brtc	.+14     	; 0x908 <__floatsisf+0x12>
 8fa:	90 95       	com	r25
 8fc:	80 95       	com	r24
 8fe:	70 95       	com	r23
 900:	61 95       	neg	r22
 902:	7f 4f       	sbci	r23, 0xFF	; 255
 904:	8f 4f       	sbci	r24, 0xFF	; 255
 906:	9f 4f       	sbci	r25, 0xFF	; 255
 908:	99 23       	and	r25, r25
 90a:	a9 f0       	breq	.+42     	; 0x936 <__floatsisf+0x40>
 90c:	f9 2f       	mov	r31, r25
 90e:	96 e9       	ldi	r25, 0x96	; 150
 910:	bb 27       	eor	r27, r27
 912:	93 95       	inc	r25
 914:	f6 95       	lsr	r31
 916:	87 95       	ror	r24
 918:	77 95       	ror	r23
 91a:	67 95       	ror	r22
 91c:	b7 95       	ror	r27
 91e:	f1 11       	cpse	r31, r1
 920:	f8 cf       	rjmp	.-16     	; 0x912 <__floatsisf+0x1c>
 922:	fa f4       	brpl	.+62     	; 0x962 <__floatsisf+0x6c>
 924:	bb 0f       	add	r27, r27
 926:	11 f4       	brne	.+4      	; 0x92c <__floatsisf+0x36>
 928:	60 ff       	sbrs	r22, 0
 92a:	1b c0       	rjmp	.+54     	; 0x962 <__floatsisf+0x6c>
 92c:	6f 5f       	subi	r22, 0xFF	; 255
 92e:	7f 4f       	sbci	r23, 0xFF	; 255
 930:	8f 4f       	sbci	r24, 0xFF	; 255
 932:	9f 4f       	sbci	r25, 0xFF	; 255
 934:	16 c0       	rjmp	.+44     	; 0x962 <__floatsisf+0x6c>
 936:	88 23       	and	r24, r24
 938:	11 f0       	breq	.+4      	; 0x93e <__floatsisf+0x48>
 93a:	96 e9       	ldi	r25, 0x96	; 150
 93c:	11 c0       	rjmp	.+34     	; 0x960 <__floatsisf+0x6a>
 93e:	77 23       	and	r23, r23
 940:	21 f0       	breq	.+8      	; 0x94a <__floatsisf+0x54>
 942:	9e e8       	ldi	r25, 0x8E	; 142
 944:	87 2f       	mov	r24, r23
 946:	76 2f       	mov	r23, r22
 948:	05 c0       	rjmp	.+10     	; 0x954 <__floatsisf+0x5e>
 94a:	66 23       	and	r22, r22
 94c:	71 f0       	breq	.+28     	; 0x96a <__floatsisf+0x74>
 94e:	96 e8       	ldi	r25, 0x86	; 134
 950:	86 2f       	mov	r24, r22
 952:	70 e0       	ldi	r23, 0x00	; 0
 954:	60 e0       	ldi	r22, 0x00	; 0
 956:	2a f0       	brmi	.+10     	; 0x962 <__floatsisf+0x6c>
 958:	9a 95       	dec	r25
 95a:	66 0f       	add	r22, r22
 95c:	77 1f       	adc	r23, r23
 95e:	88 1f       	adc	r24, r24
 960:	da f7       	brpl	.-10     	; 0x958 <__floatsisf+0x62>
 962:	88 0f       	add	r24, r24
 964:	96 95       	lsr	r25
 966:	87 95       	ror	r24
 968:	97 f9       	bld	r25, 7
 96a:	08 95       	ret

0000096c <__fp_cmp>:
 96c:	99 0f       	add	r25, r25
 96e:	00 08       	sbc	r0, r0
 970:	55 0f       	add	r21, r21
 972:	aa 0b       	sbc	r26, r26
 974:	e0 e8       	ldi	r30, 0x80	; 128
 976:	fe ef       	ldi	r31, 0xFE	; 254
 978:	16 16       	cp	r1, r22
 97a:	17 06       	cpc	r1, r23
 97c:	e8 07       	cpc	r30, r24
 97e:	f9 07       	cpc	r31, r25
 980:	c0 f0       	brcs	.+48     	; 0x9b2 <__fp_cmp+0x46>
 982:	12 16       	cp	r1, r18
 984:	13 06       	cpc	r1, r19
 986:	e4 07       	cpc	r30, r20
 988:	f5 07       	cpc	r31, r21
 98a:	98 f0       	brcs	.+38     	; 0x9b2 <__fp_cmp+0x46>
 98c:	62 1b       	sub	r22, r18
 98e:	73 0b       	sbc	r23, r19
 990:	84 0b       	sbc	r24, r20
 992:	95 0b       	sbc	r25, r21
 994:	39 f4       	brne	.+14     	; 0x9a4 <__fp_cmp+0x38>
 996:	0a 26       	eor	r0, r26
 998:	61 f0       	breq	.+24     	; 0x9b2 <__fp_cmp+0x46>
 99a:	23 2b       	or	r18, r19
 99c:	24 2b       	or	r18, r20
 99e:	25 2b       	or	r18, r21
 9a0:	21 f4       	brne	.+8      	; 0x9aa <__fp_cmp+0x3e>
 9a2:	08 95       	ret
 9a4:	0a 26       	eor	r0, r26
 9a6:	09 f4       	brne	.+2      	; 0x9aa <__fp_cmp+0x3e>
 9a8:	a1 40       	sbci	r26, 0x01	; 1
 9aa:	a6 95       	lsr	r26
 9ac:	8f ef       	ldi	r24, 0xFF	; 255
 9ae:	81 1d       	adc	r24, r1
 9b0:	81 1d       	adc	r24, r1
 9b2:	08 95       	ret

000009b4 <__fp_inf>:
 9b4:	97 f9       	bld	r25, 7
 9b6:	9f 67       	ori	r25, 0x7F	; 127
 9b8:	80 e8       	ldi	r24, 0x80	; 128
 9ba:	70 e0       	ldi	r23, 0x00	; 0
 9bc:	60 e0       	ldi	r22, 0x00	; 0
 9be:	08 95       	ret

000009c0 <__fp_mintl>:
 9c0:	88 23       	and	r24, r24
 9c2:	71 f4       	brne	.+28     	; 0x9e0 <__fp_mintl+0x20>
 9c4:	77 23       	and	r23, r23
 9c6:	21 f0       	breq	.+8      	; 0x9d0 <__fp_mintl+0x10>
 9c8:	98 50       	subi	r25, 0x08	; 8
 9ca:	87 2b       	or	r24, r23
 9cc:	76 2f       	mov	r23, r22
 9ce:	07 c0       	rjmp	.+14     	; 0x9de <__fp_mintl+0x1e>
 9d0:	66 23       	and	r22, r22
 9d2:	11 f4       	brne	.+4      	; 0x9d8 <__fp_mintl+0x18>
 9d4:	99 27       	eor	r25, r25
 9d6:	0d c0       	rjmp	.+26     	; 0x9f2 <__fp_mintl+0x32>
 9d8:	90 51       	subi	r25, 0x10	; 16
 9da:	86 2b       	or	r24, r22
 9dc:	70 e0       	ldi	r23, 0x00	; 0
 9de:	60 e0       	ldi	r22, 0x00	; 0
 9e0:	2a f0       	brmi	.+10     	; 0x9ec <__fp_mintl+0x2c>
 9e2:	9a 95       	dec	r25
 9e4:	66 0f       	add	r22, r22
 9e6:	77 1f       	adc	r23, r23
 9e8:	88 1f       	adc	r24, r24
 9ea:	da f7       	brpl	.-10     	; 0x9e2 <__fp_mintl+0x22>
 9ec:	88 0f       	add	r24, r24
 9ee:	96 95       	lsr	r25
 9f0:	87 95       	ror	r24
 9f2:	97 f9       	bld	r25, 7
 9f4:	08 95       	ret

000009f6 <__fp_mpack>:
 9f6:	9f 3f       	cpi	r25, 0xFF	; 255
 9f8:	31 f0       	breq	.+12     	; 0xa06 <__fp_mpack_finite+0xc>

000009fa <__fp_mpack_finite>:
 9fa:	91 50       	subi	r25, 0x01	; 1
 9fc:	20 f4       	brcc	.+8      	; 0xa06 <__fp_mpack_finite+0xc>
 9fe:	87 95       	ror	r24
 a00:	77 95       	ror	r23
 a02:	67 95       	ror	r22
 a04:	b7 95       	ror	r27
 a06:	88 0f       	add	r24, r24
 a08:	91 1d       	adc	r25, r1
 a0a:	96 95       	lsr	r25
 a0c:	87 95       	ror	r24
 a0e:	97 f9       	bld	r25, 7
 a10:	08 95       	ret

00000a12 <__fp_nan>:
 a12:	9f ef       	ldi	r25, 0xFF	; 255
 a14:	80 ec       	ldi	r24, 0xC0	; 192
 a16:	08 95       	ret

00000a18 <__fp_pscA>:
 a18:	00 24       	eor	r0, r0
 a1a:	0a 94       	dec	r0
 a1c:	16 16       	cp	r1, r22
 a1e:	17 06       	cpc	r1, r23
 a20:	18 06       	cpc	r1, r24
 a22:	09 06       	cpc	r0, r25
 a24:	08 95       	ret

00000a26 <__fp_pscB>:
 a26:	00 24       	eor	r0, r0
 a28:	0a 94       	dec	r0
 a2a:	12 16       	cp	r1, r18
 a2c:	13 06       	cpc	r1, r19
 a2e:	14 06       	cpc	r1, r20
 a30:	05 06       	cpc	r0, r21
 a32:	08 95       	ret

00000a34 <__fp_round>:
 a34:	09 2e       	mov	r0, r25
 a36:	03 94       	inc	r0
 a38:	00 0c       	add	r0, r0
 a3a:	11 f4       	brne	.+4      	; 0xa40 <__fp_round+0xc>
 a3c:	88 23       	and	r24, r24
 a3e:	52 f0       	brmi	.+20     	; 0xa54 <__fp_round+0x20>
 a40:	bb 0f       	add	r27, r27
 a42:	40 f4       	brcc	.+16     	; 0xa54 <__fp_round+0x20>
 a44:	bf 2b       	or	r27, r31
 a46:	11 f4       	brne	.+4      	; 0xa4c <__fp_round+0x18>
 a48:	60 ff       	sbrs	r22, 0
 a4a:	04 c0       	rjmp	.+8      	; 0xa54 <__fp_round+0x20>
 a4c:	6f 5f       	subi	r22, 0xFF	; 255
 a4e:	7f 4f       	sbci	r23, 0xFF	; 255
 a50:	8f 4f       	sbci	r24, 0xFF	; 255
 a52:	9f 4f       	sbci	r25, 0xFF	; 255
 a54:	08 95       	ret

00000a56 <__fp_split3>:
 a56:	57 fd       	sbrc	r21, 7
 a58:	90 58       	subi	r25, 0x80	; 128
 a5a:	44 0f       	add	r20, r20
 a5c:	55 1f       	adc	r21, r21
 a5e:	59 f0       	breq	.+22     	; 0xa76 <__fp_splitA+0x10>
 a60:	5f 3f       	cpi	r21, 0xFF	; 255
 a62:	71 f0       	breq	.+28     	; 0xa80 <__fp_splitA+0x1a>
 a64:	47 95       	ror	r20

00000a66 <__fp_splitA>:
 a66:	88 0f       	add	r24, r24
 a68:	97 fb       	bst	r25, 7
 a6a:	99 1f       	adc	r25, r25
 a6c:	61 f0       	breq	.+24     	; 0xa86 <__fp_splitA+0x20>
 a6e:	9f 3f       	cpi	r25, 0xFF	; 255
 a70:	79 f0       	breq	.+30     	; 0xa90 <__fp_splitA+0x2a>
 a72:	87 95       	ror	r24
 a74:	08 95       	ret
 a76:	12 16       	cp	r1, r18
 a78:	13 06       	cpc	r1, r19
 a7a:	14 06       	cpc	r1, r20
 a7c:	55 1f       	adc	r21, r21
 a7e:	f2 cf       	rjmp	.-28     	; 0xa64 <__fp_split3+0xe>
 a80:	46 95       	lsr	r20
 a82:	f1 df       	rcall	.-30     	; 0xa66 <__fp_splitA>
 a84:	08 c0       	rjmp	.+16     	; 0xa96 <__fp_splitA+0x30>
 a86:	16 16       	cp	r1, r22
 a88:	17 06       	cpc	r1, r23
 a8a:	18 06       	cpc	r1, r24
 a8c:	99 1f       	adc	r25, r25
 a8e:	f1 cf       	rjmp	.-30     	; 0xa72 <__fp_splitA+0xc>
 a90:	86 95       	lsr	r24
 a92:	71 05       	cpc	r23, r1
 a94:	61 05       	cpc	r22, r1
 a96:	08 94       	sec
 a98:	08 95       	ret

00000a9a <__fp_trunc>:
 a9a:	0e 94 33 05 	call	0xa66	; 0xa66 <__fp_splitA>
 a9e:	a0 f0       	brcs	.+40     	; 0xac8 <__fp_trunc+0x2e>
 aa0:	be e7       	ldi	r27, 0x7E	; 126
 aa2:	b9 17       	cp	r27, r25
 aa4:	88 f4       	brcc	.+34     	; 0xac8 <__fp_trunc+0x2e>
 aa6:	bb 27       	eor	r27, r27
 aa8:	9f 38       	cpi	r25, 0x8F	; 143
 aaa:	60 f4       	brcc	.+24     	; 0xac4 <__fp_trunc+0x2a>
 aac:	16 16       	cp	r1, r22
 aae:	b1 1d       	adc	r27, r1
 ab0:	67 2f       	mov	r22, r23
 ab2:	78 2f       	mov	r23, r24
 ab4:	88 27       	eor	r24, r24
 ab6:	98 5f       	subi	r25, 0xF8	; 248
 ab8:	f7 cf       	rjmp	.-18     	; 0xaa8 <__fp_trunc+0xe>
 aba:	86 95       	lsr	r24
 abc:	77 95       	ror	r23
 abe:	67 95       	ror	r22
 ac0:	b1 1d       	adc	r27, r1
 ac2:	93 95       	inc	r25
 ac4:	96 39       	cpi	r25, 0x96	; 150
 ac6:	c8 f3       	brcs	.-14     	; 0xaba <__fp_trunc+0x20>
 ac8:	08 95       	ret

00000aca <__fp_zero>:
 aca:	e8 94       	clt

00000acc <__fp_szero>:
 acc:	bb 27       	eor	r27, r27
 ace:	66 27       	eor	r22, r22
 ad0:	77 27       	eor	r23, r23
 ad2:	cb 01       	movw	r24, r22
 ad4:	97 f9       	bld	r25, 7
 ad6:	08 95       	ret

00000ad8 <__gesf2>:
 ad8:	0e 94 b6 04 	call	0x96c	; 0x96c <__fp_cmp>
 adc:	08 f4       	brcc	.+2      	; 0xae0 <__gesf2+0x8>
 ade:	8f ef       	ldi	r24, 0xFF	; 255
 ae0:	08 95       	ret

00000ae2 <_exit>:
 ae2:	f8 94       	cli

00000ae4 <__stop_program>:
 ae4:	ff cf       	rjmp	.-2      	; 0xae4 <__stop_program>
